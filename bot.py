import os
import logging
from typing import Optional
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, ChatMemberOwner, ChatMemberAdministrator
from aiogram.filters import CommandStart
from langdetect import detect
import requests
from dotenv import load_dotenv
from flask import Flask, jsonify

load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")

OPENROUTER_URL = "https://openrouter.ai/api/v1/chat/completions"
MODEL_NAME = "google/gemini-2.0-flash-exp:free"

HEADERS = {
    "Authorization": f"Bearer {OPENROUTER_API_KEY}",
    "Content-Type": "application/json"
}

logging.basicConfig(level=logging.INFO)
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()

blocked_users = set()

app = Flask(__name__)

@app.route('/')
def home():
    return jsonify({"status": "Bot is running"}), 200

def analyze_content(text: str) -> dict:
    print(f"[DEBUG] –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç: {text}")
    prompt = (
        "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ:\n"
        "- –ú–∞—Ç–∞ –∏–ª–∏ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω–æ–π –ª–µ–∫—Å–∏–∫–∏\n"
        "- –†–µ–∫–ª–∞–º—ã –∏–ª–∏ —Å–ø–∞–º–∞\n"
        "- –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –≤ —Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ –∫–∞–Ω–∞–ª—ã, —á–∞—Ç—ã, –≥—Ä—É–ø–ø—ã\n"
        "–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:\n"
        "{\n"
        "  \"contains_prohibited\": true/false,\n"
        "  \"reason\": \"–ø—Ä–∏—á–∏–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏\",\n"
        "  \"language\": \"—è–∑—ã–∫ —Å–æ–æ–±—â–µ–Ω–∏—è\"\n"
        "}\n"
        "–¢–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: "
        f"{text}"
    )

    payload = {
        "model": MODEL_NAME,
        "messages": [{"role": "user", "content": prompt}],
        "temperature": 0.2,
        "max_tokens": 200
    }

    try:
        response = requests.post(OPENROUTER_URL, headers=HEADERS, json=payload)
        result = response.json()
        content = result["choices"][0]["message"]["content"]
        analysis = eval(content)
        print(f"[DEBUG] –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞: {analysis}")
        return analysis
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç–µ–∫—Å—Ç–∞: {e}")
        return {"contains_prohibited": False, "reason": "–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞", "language": "unknown"}

async def is_admin(chat_id: int, user_id: int) -> bool:
    try:
        member = await bot.get_chat_member(chat_id=chat_id, user_id=user_id)
        return isinstance(member, (ChatMemberOwner, ChatMemberAdministrator))
    except Exception as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–¥–º–∏–Ω–∞: {e}")
        return False

@dp.message()
async def log_all_messages(message: Message):
    print(f"[DEBUG] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.id}: {message.text or '[–Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ]'}")

@dp.message(F.text)
async def handle_message(message: Message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    text = message.text

    print(f"[INFO] –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {user_id} –≤ —á–∞—Ç–µ {chat_id}: {text}")

    if await is_admin(chat_id, user_id):
        print(f"[INFO] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} ‚Äî –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
        return

    if user_id in blocked_users:
        print(f"[INFO] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        await message.delete()
        return

    analysis = analyze_content(text)

    if analysis["contains_prohibited"]:
        print(f"[ACTION] –ù–∞—Ä—É—à–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ. –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}. –ü—Ä–∏—á–∏–Ω–∞: {analysis['reason']}")
        try:
            await message.delete()
            await bot.ban_chat_member(chat_id, user_id)
            reason = analysis["reason"]
            lang = analysis["language"]
            await bot.send_message(
                chat_id,
                f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.\n"
                f"–ü—Ä–∏—á–∏–Ω–∞: {reason} ({lang})"
            )
            blocked_users.add(user_id)
        except Exception as e:
            print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            await bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    else:
        print(f"[INFO] –°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ.")

@dp.message(CommandStart())
async def start(message: Message):
    print(f"[INFO] –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç {message.from_user.id}")
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–º–æ–¥–µ—Ä–∞—Ç–æ—Ä. –Ø –±—É–¥—É —Å–ª–µ–¥–∏—Ç—å –∑–∞ –ø–æ—Ä—è–¥–∫–æ–º –≤ —á–∞—Ç–µ.")

async def run_bot():
    await dp.start_polling(bot)

if __name__ == "__main__":
    from threading import Thread
    import asyncio

    def run_flask():
        port = int(os.getenv("PORT", 10000))
        app.run(host="0.0.0.0", port=port)

    flask_thread = Thread(target=run_flask)
    flask_thread.daemon = True
    flask_thread.start()

    print("[BOOT] –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞...")
    asyncio.run(run_bot())
